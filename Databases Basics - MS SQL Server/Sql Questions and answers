REATE DATABASE ORG;
SHOW DATABASES;
USE ORG;

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT,
	JOINING_DATE DATETIME,
	DEPARTMENT NVARCHAR(25)
);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');

CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT,
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');

CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE NVARCHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Title 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001, 'Manager', '2016-02-20 00:00:00'),
 (002, 'Executive', '2016-06-11 00:00:00'),
 (008, 'Executive', '2016-06-11 00:00:00'),
 (005, 'Manager', '2016-06-11 00:00:00'),
 (004, 'Asst. Manager', '2016-06-11 00:00:00'),
 (007, 'Executive', '2016-06-11 00:00:00'),
 (006, 'Lead', '2016-06-11 00:00:00'),
 (003, 'Lead', '2016-06-11 00:00:00');


USE ORG;
GO

-- 1.	Write an SQL query to fetch “FIRST_NAME” from Worker table using the alias name as <WORKER_NAME>.
SELECT FIRST_NAME AS WORKER_NAME 
FROM WORKER

-- 2.	Write an SQL query to fetch unique values of DEPARTMENT from Worker table.
SELECT DISTINCT DEPARTMENT 
FROM Worker

-- 3.	Write an SQL query to print the first three characters of  FIRST_NAME from Worker table.
SELECT SUBSTRING(FIRST_NAME,1,3) AS CUT_NAME 
FROM Worker

-- 4.	Write an SQL query to find the position of the alphabet (‘a’) in the first name column ‘Amitabh’ from Worker table. 
SELECT TOP(1) CHARINDEX('a', FIRST_NAME COLLATE Latin1_General_CS_AS, 1) AS CHAR_INDEX 
FROM Worker 
WHERE FIRST_NAME LIKE 'Amitabh'

-- 5.	Write an SQL query to print the DEPARTMENT from Worker table after removing white spaces from the left side.
SELECT LTRIM(DEPARTMENT) AS DEPARTMENT 
FROM Worker

-- 6.	Write an SQL query that fetches the unique values of DEPARTMENT from Worker table and prints its length.
SELECT DISTINCT LEN(DEPARTMENT) AS DEPARTMENT_LENGTH
FROM Worker

-- 7.	Write an SQL query to print the FIRST_NAME and LAST_NAME from Worker table into a single column COMPLETE_NAME. A space char should separate them.
 -- OPTION 1
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS COMPLETE_NAME 
FROM Worker

-- OPTION 2
SELECT FIRST_NAME + ' ' + LAST_NAME AS COMPLETE_NAME 
FROM Worker

-- 8.	Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.
SELECT * FROM Worker
ORDER BY FIRST_NAME ASC -- Default is Ascending

-- 9.	Write an SQL query to print details for Workers with the first name as “Vipul” and “Satish” from Worker table.
SELECT * FROM Worker
WHERE FIRST_NAME IN ('Vipul', 'Satish')

-- 10.	Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from Worker table.
SELECT * FROM Worker
WHERE FIRST_NAME NOT IN ('Vipul', 'Satish')

-- 11.	Write an SQL query to print details of Workers with DEPARTMENT name as “Admin”.
SELECT * FROM Worker 
WHERE DEPARTMENT LIKE 'Admin'

-- 12.	Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.
SELECT * FROM Worker 
WHERE FIRST_NAME LIKE '%a%'

-- 13.	Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.
SELECT * FROM Worker 
WHERE SALARY BETWEEN 100000 AND 500000

-- 14.	Write an SQL query to print details of the Workers who have joined in Feb’2014. 
DECLARE @sDate datetime
SET @sDate =  convert(datetime, 'Feb,2020', 7)   -- I changed the year because when filling in the database we do not enter anything with the year 2014 and there will be no results

SELECT * FROM Worker 
WHERE DATEPART(year,JOINING_DATE) = DATEPART(year,@sDate)
AND DATEPART(month,JOINING_DATE) = DATEPART(month,@sDate)

-- 15.	Write an SQL query to fetch worker names with salaries >= 50000 and <= 100000.
SELECT * FROM Worker 
WHERE SALARY >= 50000 AND  SALARY <= 100000

-- 16.	Write an SQL query to fetch the no. of workers for each department in the descending order.
SELECT DEPARTMENT, COUNT(DEPARTMENT) AS NUMBER_OF_WORKERS FROM Worker 
GROUP BY DEPARTMENT
ORDER BY NUMBER_OF_WORKERS DESC


-- 17.	Write an SQL query to fetch duplicate records having matching data in some fields of a table.
-- OPTION 1 (FOR DEPARTMENT, SALARY, JOINING_DATE)
SELECT FIRST_NAME, LAST_NAME, DEPARTMENT, SALARY, JOINING_DATE, COUNT(*) FROM Worker
GROUP BY FIRST_NAME, LAST_NAME, DEPARTMENT, SALARY, JOINING_DATE
HAVING COUNT(*) > 1

-- OPTION 2 (FOR DEPARTMENT, SALARY, JOINING_DATE)
WITH cte AS (
    SELECT 
	    WORKER_ID,
		DEPARTMENT,
		SALARY, 
		JOINING_DATE,
        ROW_NUMBER() OVER (
            PARTITION BY  DEPARTMENT, SALARY, JOINING_DATE
            ORDER BY WORKER_ID, DEPARTMENT, SALARY, JOINING_DATE) rownum
    FROM 
        Worker
) 

SELECT  WORKER_ID,
		DEPARTMENT,
		SALARY ,
		JOINING_DATE
FROM cte 
WHERE rownum > 1

--18.	Write an SQL query to show only odd rows from a table.
SELECT W.WORKER_ID, W.FIRST_NAME, W.LAST_NAME, W.DEPARTMENT, W.JOINING_DATE, W.SALARY
FROM (
      SELECT *, Row_Number() 
      OVER(ORDER BY WORKER_ID,
	                FIRST_NAME, 
			 	    LAST_NAME, 
			 	    DEPARTMENT, 
			 	    JOINING_DATE, 
			 	    SALARY) AS RowNumber 
		   
FROM Worker) AS W
WHERE W.RowNumber % 2 = 1 

-- 19.	Write an SQL query to fetch the departments that have less than five people in it.
SELECT DEPARTMENT, COUNT(DEPARTMENT) AS NUMBER_OF_WORKERS FROM Worker   
GROUP BY DEPARTMENT
HAVING COUNT(DEPARTMENT) < 5
ORDER BY NUMBER_OF_WORKERS DESC

-- 20.	Write an SQL query to show one row twice in results from a table.
SELECT TOP(1) A.*, B.* FROM Worker A, Worker B

    21. Write a SQL query to print all workers /FIRST_NAME, LAST_NAME AND SALARY columns/ through cursor. Convert SALARY to decimal with precision (6,2).

DECLARE WORKERS CURSOR FOR SELECT 
   FIRST_NAME, 
   LAST_NAME, 
   SALARY 
FROM  Worker

OPEN WORKERS  

DECLARE @FIRST_NAME CHAR(25), @LAST_NAME CHAR(25),  
@SALARY INT;     -- Salary is an integer in the database
	
FETCH NEXT FROM WORKERS   
INTO @FIRST_NAME, @LAST_NAME, @SALARY 
 
print CONCAT(@FIRST_NAME, @LAST_NAME, CAST( @SALARY AS NUMERIC(6,2)))

CLOSE WORKERS;
DEALLOCATE WORKERS;


    22. Write a SQL query for the workers who have already received bonuses. Show information for the remaining workers in the same query which indicates those workers are still “pending for assessment”.

SELECT  W.FIRST_NAME, 
        W.LAST_NAME, 
	 W.WORKER_ID,  
CASE WHEN (B.BONUS_DATE < GETDATE())  -- CASE WHEN (DATEPART(day,B.BONUS_DATE) < DATEPART(day,GETDATE()))   -- I'm not sure about the business logic here. Every month on the same day or only once on one date 
THEN    
CAST(b.BONUS_DATE AS nvarchar) 
ELSE 'pending for assessment' 
END Bonus
FROM WORKER AS W
JOIN BONUS AS B ON B.WORKER_REF_ID = W.WORKER_ID


23. Add a new column into Workers called CLOSE_DATE. Write a SQL query which shows that three workers, you choose, have been released today.


	
ALTER TABLE Worker
ADD CLOSE_DATE DATETIME DEFAULT NULL; 

UPDATE Worker
      SET CLOSE_DATE = GETDATE()
      WHERE WORKER_ID = '001' OR WORKER_ID = '002' OR  WORKER_ID ='003'
   SELECT * FROM Worker 
   WHERE CLOSE_DATE IS NOT NULL -- Shows the result

24. Write a SQL query to hire 5 “Leads”.


INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(013, 'Ani', 'Georgieva', 50000, GETDATE(), 'Department Name'),
		(014, 'Maq', 'Ivanova', 50000, GETDATE(), 'Department Name'),
		(015, 'Pesho', 'Petrov', 50000, GETDATE(), 'Department Name'),
		(016, 'Piter', 'Straut', 50000, GETDATE(), 'Department Name'),
		(017, 'Maria', 'Ivanova', 50000, GETDATE(), 'Department Name');

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(013, 100, GETDATE()),
		(014, 100, GETDATE()),
		(015, 100, GETDATE()),
		(016, 100, GETDATE()),
		(017, 100, GETDATE());

INSERT INTO Title 
     (WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
          (013, 'Leads', GETDATE()),
          (014, 'Leads', GETDATE()),
          (015, 'Leads', GETDATE()),
          (016, 'Leads', GETDATE()),
          (017, 'Leads', GETDATE());


25. Write a SQL query to calculate how many “Leads” you have in the company. Write a SQL query to give welcome bonuses 500 only for the new ones.


SELECT COUNT(WORKER_TITLE) AS COUNT_OF_LEADS, WORKER_TITLE from Title 
   WHERE WORKER_TITLE = 'Leads'
      GROUP BY WORKER_TITLE --'Leads' count query



UPDATE Bonus -- Give welcome bonuses query
	SET BONUS_AMOUNT = BONUS_AMOUNT + 500
	FROM Bonus B
	INNER JOIN Title T on T.WORKER_REF_ID = B.WORKER_REF_ID
	INNER JOIN Worker W ON  W.WORKER_ID = T.WORKER_REF_ID
	WHERE T.WORKER_TITLE = 'Leads' 
	and Datepart(day,W.JOINING_DATE) = DATEPART(DAY, GETDATE()) 
	AND Datepart(YEAR,W.JOINING_DATE) = DATEPART(YEAR, GETDATE())
	AND Datepart(MONTH,W.JOINING_DATE) = DATEPART(MONTH, GETDATE())
